[Ngữ cảnh #7] Đăng ký / Đăng nhập + bảo vệ route với JWT

📦 Cài đặt:
---------------------
npm install bcryptjs jsonwebtoken

📄 models/user.model.js
---------------------
const mongoose = require('mongoose');
const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
});
module.exports = mongoose.model('User', userSchema);

📄 controllers/auth.controller.js
---------------------
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/user.model');
const JWT_SECRET = 'your_secret_key';

exports.register = async (req, res) => {
  const { name, email, password } = req.body;
  const existing = await User.findOne({ email });
  if (existing) return res.status(400).json({ error: 'Email đã tồn tại' });
  const hashed = await bcrypt.hash(password, 10);
  const user = await User.create({ name, email, password: hashed });
  res.json({ message: 'Đăng ký thành công', userId: user._id });
};

exports.login = async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ error: 'Email không đúng' });
  const match = await bcrypt.compare(password, user.password);
  if (!match) return res.status(400).json({ error: 'Sai mật khẩu' });
  const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
};

📄 middlewares/auth.middleware.js
---------------------
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your_secret_key';
module.exports = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ error: 'Không có token' });
  const token = authHeader.split(' ')[1];
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch {
    res.status(403).json({ error: 'Token không hợp lệ' });
  }
};

📄 routes/auth.route.js
---------------------
const express = require('express');
const router = express.Router();
const authController = require('../controllers/auth.controller');
router.post('/register', authController.register);
router.post('/login', authController.login);
module.exports = router;

📄 routes/private.route.js
---------------------
const express = require('express');
const router = express.Router();
const auth = require('../middlewares/auth.middleware');
router.get('/profile', auth, (req, res) => {
  res.json({ message: `Hello user ${req.user.userId}` });
});
module.exports = router;

📄 server.js
---------------------
const express = require('express');
const app = express();
const authRoutes = require('./routes/auth.route');
const privateRoutes = require('./routes/private.route');

app.use(express.json());
app.use('/auth', authRoutes);
app.use('/private', privateRoutes);

app.listen(3000, () => console.log('✅ Server chạy ở cổng 3000'));
