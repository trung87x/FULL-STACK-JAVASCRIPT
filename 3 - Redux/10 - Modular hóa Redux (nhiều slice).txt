=======================================================
Ng·ªØ c·∫£nh #10: Modular h√≥a Redux ‚Äì T·ªï ch·ª©c nhi·ªÅu slice
=======================================================

üéØ M·ª•c ti√™u:
- T√°ch reducer v√† logic ra t·ª´ng module ri√™ng bi·ªát (cart, auth, ui, product...)
- Qu·∫£n l√Ω r√µ r√†ng, d·ªÖ scale, d·ªÖ debug
- T√≠ch h·ª£p c√°c slice l·∫°i v·ªõi nhau trong store

=======================================================
1. C·∫•u tr√∫c th∆∞ m·ª•c nhi·ªÅu slice
=======================================================

src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îî‚îÄ‚îÄ store.js             // K·∫øt h·ª£p c√°c slice
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ authSlice.js     // Slice qu·∫£n l√Ω ƒëƒÉng nh·∫≠p
‚îÇ   ‚îú‚îÄ‚îÄ cart/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ cartSlice.js     // Slice qu·∫£n l√Ω gi·ªè h√†ng
‚îÇ   ‚îú‚îÄ‚îÄ product/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ productSlice.js  // Slice qu·∫£n l√Ω s·∫£n ph·∫©m
‚îÇ   ‚îî‚îÄ‚îÄ ui/
‚îÇ       ‚îî‚îÄ‚îÄ uiSlice.js       // Slice tr·∫°ng th√°i giao di·ªán
‚îú‚îÄ‚îÄ App.jsx
‚îî‚îÄ‚îÄ main.jsx

=======================================================
2. M·ªôt v√≠ d·ª• slice ‚Äì cartSlice.js
=======================================================
// src/features/cart/cartSlice.js
import { createSlice } from "@reduxjs/toolkit";

const cartSlice = createSlice({
  name: "cart",
  initialState: {
    items: [],
  },
  reducers: {
    addToCart(state, action) {
      state.items.push(action.payload);
    },
    removeFromCart(state, action) {
      state.items = state.items.filter((i) => i.id !== action.payload);
    },
  },
});

export const { addToCart, removeFromCart } = cartSlice.actions;
export default cartSlice.reducer;

=======================================================
3. K·∫øt h·ª£p c√°c slice v√†o store
=======================================================
// src/app/store.js
import { configureStore } from "@reduxjs/toolkit";
import cartReducer from "../features/cart/cartSlice";
import authReducer from "../features/auth/authSlice";
import productReducer from "../features/product/productSlice";
import uiReducer from "../features/ui/uiSlice";

export const store = configureStore({
  reducer: {
    cart: cartReducer,
    auth: authReducer,
    product: productReducer,
    ui: uiReducer,
  },
});

=======================================================
4. D√πng slice trong component
=======================================================
// App.jsx
import { useSelector, useDispatch } from "react-redux";
import { addToCart, removeFromCart } from "./features/cart/cartSlice";

export default function App() {
  const cartItems = useSelector((state) => state.cart.items);
  const dispatch = useDispatch();

  const handleAdd = () => {
    dispatch(addToCart({ id: Date.now(), name: "S·∫£n ph·∫©m A" }));
  };

  const handleRemove = (id) => {
    dispatch(removeFromCart(id));
  };

  return (
    <div>
      <h2>üõí Gi·ªè h√†ng ({cartItems.length} s·∫£n ph·∫©m)</h2>
      <button onClick={handleAdd}>‚ûï Th√™m</button>
      <ul>
        {cartItems.map((item) => (
          <li key={item.id}>
            {item.name}{" "}
            <button onClick={() => handleRemove(item.id)}>‚ùå</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

=======================================================
5. G·∫Øn store v√†o ·ª©ng d·ª•ng
=======================================================
// main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import { Provider } from "react-redux";
import { store } from "./app/store.js";

ReactDOM.createRoot(document.getElementById("root")).render(
  <Provider store={store}>
    <App />
  </Provider>
);

=======================================================
‚úÖ Ghi ch√∫:
=======================================================
- M·ªói slice l√† m·ªôt module ƒë·ªôc l·∫≠p: d·ªÖ vi·∫øt unit test, d·ªÖ m·ªü r·ªông
- C·∫•u tr√∫c n√†y r·∫•t ph√π h·ª£p khi app ph·ª©c t·∫°p: user, post, comment, cart, ui...
- C√≥ th·ªÉ th√™m middleware, thunk ho·∫∑c combine reducer th·ªß c√¥ng n·∫øu c·∫ßn

üì¶ Khi ·ª©ng d·ª•ng c√≥ nhi·ªÅu slice, b·∫°n c√≥ th·ªÉ chia r√µ domain v√† d√πng th√™m selectors ri√™ng ƒë·ªÉ truy xu·∫•t state s·∫°ch s·∫Ω.
