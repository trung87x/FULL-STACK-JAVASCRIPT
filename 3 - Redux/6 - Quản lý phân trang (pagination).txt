============================
üß© Ng·ªØ c·∫£nh #6: Qu·∫£n l√Ω ph√¢n trang (Pagination)
============================

üéØ M·ª•c ti√™u:
L∆∞u v√† ƒëi·ªÅu khi·ªÉn tr·∫°ng th√°i ph√¢n trang nh∆∞:
- Trang hi·ªán t·∫°i (current page)
- S·ªë ph·∫ßn t·ª≠ m·ªói trang (limit/pageSize)
- T·ªïng s·ªë trang (optional)
=> Gi√∫p gi·ªØ tr·∫°ng th√°i khi ng∆∞·ªùi d√πng chuy·ªÉn trang, ho·∫∑c khi k·∫øt h·ª£p v·ªõi filter/search.

============================
üìÅ C·∫•u tr√∫c th∆∞ m·ª•c
============================
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îî‚îÄ‚îÄ store.js
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îú‚îÄ‚îÄ pagination/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ paginationSlice.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PaginationControl.jsx
‚îÇ   ‚îî‚îÄ‚îÄ posts/
‚îÇ       ‚îî‚îÄ‚îÄ PostList.jsx (gi·∫£ ƒë·ªãnh l√† danh s√°ch √°p d·ª•ng ph√¢n trang)
‚îî‚îÄ‚îÄ App.jsx

============================
üß† Redux Slice ‚Äì paginationSlice.js
============================
import { createSlice } from "@reduxjs/toolkit";

const paginationSlice = createSlice({
  name: "pagination",
  initialState: {
    currentPage: 1,
    pageSize: 10,
    totalPages: 0, // optional n·∫øu d√πng API
  },
  reducers: {
    setCurrentPage: (state, action) => {
      state.currentPage = action.payload;
    },
    setPageSize: (state, action) => {
      state.pageSize = action.payload;
    },
    setTotalPages: (state, action) => {
      state.totalPages = action.payload;
    },
  },
});

export const { setCurrentPage, setPageSize, setTotalPages } = paginationSlice.actions;
export default paginationSlice.reducer;

============================
‚öôÔ∏è Store ‚Äì store.js
============================
import { configureStore } from "@reduxjs/toolkit";
import paginationReducer from "../features/pagination/paginationSlice";

export const store = configureStore({
  reducer: {
    pagination: paginationReducer,
  },
});

============================
üß© Component ‚Äì PaginationControl.jsx
============================
import React from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  setCurrentPage,
  setPageSize,
} from "./paginationSlice";

export default function PaginationControl() {
  const { currentPage, pageSize } = useSelector((state) => state.pagination);
  const dispatch = useDispatch();

  return (
    <div>
      <button
        onClick={() => dispatch(setCurrentPage(currentPage - 1))}
        disabled={currentPage === 1}
      >
        Trang tr∆∞·ªõc
      </button>

      <span>Trang {currentPage}</span>

      <button onClick={() => dispatch(setCurrentPage(currentPage + 1))}>
        Trang sau
      </button>

      <select
        value={pageSize}
        onChange={(e) => dispatch(setPageSize(Number(e.target.value)))}
      >
        <option value={5}>5 / trang</option>
        <option value={10}>10 / trang</option>
        <option value={20}>20 / trang</option>
      </select>
    </div>
  );
}

============================
üîó App.jsx
============================
import React from "react";
import { Provider } from "react-redux";
import { store } from "./app/store";
import PaginationControl from "./features/pagination/PaginationControl";

function App() {
  return (
    <Provider store={store}>
      <PaginationControl />
    </Provider>
  );
}

export default App;

============================
üìå Ghi ch√∫ cu·ªëi c√πng
============================
- Vi·ªác l·∫•y d·ªØ li·ªáu t∆∞∆°ng ·ª©ng v·ªõi `currentPage` v√† `pageSize` th∆∞·ªùng n·∫±m trong side-effect (useEffect ho·∫∑c thunk).
- C√≥ th·ªÉ k·∫øt h·ª£p c√πng c√°c filter/search ƒë·ªÉ g·ªçi l·∫°i API khi c√°c tham s·ªë thay ƒë·ªïi.
- `totalPages` c√≥ th·ªÉ l·∫•y t·ª´ API v√† l∆∞u v√†o Redux n·∫øu c·∫ßn render UI ƒëi·ªÅu h∆∞·ªõng n√¢ng cao.
