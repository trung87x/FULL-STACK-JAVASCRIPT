============================
üß© Ng·ªØ c·∫£nh #3: Qu·∫£n l√Ω danh s√°ch (CRUD)
============================

üéØ M·ª•c ti√™u:
Qu·∫£n l√Ω danh s√°ch d·ªØ li·ªáu (todo list, danh s√°ch ng∆∞·ªùi d√πng, b√†i vi·∫øt...) v·ªõi c√°c thao t√°c:
- Add (th√™m m·ªõi)
- Edit (ch·ªânh s·ª≠a)
- Delete (x√≥a)
- Fetch (l·∫•y danh s√°ch t·ª´ server)

============================
üìÅ C·∫•u tr√∫c th∆∞ m·ª•c
============================
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îî‚îÄ‚îÄ store.js
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îî‚îÄ‚îÄ todos/
‚îÇ       ‚îú‚îÄ‚îÄ todoSlice.js
‚îÇ       ‚îî‚îÄ‚îÄ TodoList.jsx
‚îî‚îÄ‚îÄ App.jsx

============================
üß† Redux Slice ‚Äì todoSlice.js
============================
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

// Gi·∫£ l·∫≠p g·ªçi API
export const fetchTodos = createAsyncThunk("todos/fetchTodos", async () => {
  const res = await fetch("https://jsonplaceholder.typicode.com/todos?_limit=5");
  return await res.json();
});

const todoSlice = createSlice({
  name: "todos",
  initialState: {
    items: [],
    loading: false,
    error: null,
  },
  reducers: {
    addTodo: (state, action) => {
      state.items.push(action.payload);
    },
    deleteTodo: (state, action) => {
      state.items = state.items.filter(todo => todo.id !== action.payload);
    },
    editTodo: (state, action) => {
      const { id, title } = action.payload;
      const todo = state.items.find(t => t.id === id);
      if (todo) todo.title = title;
    },
  },
  extraReducers: builder => {
    builder
      .addCase(fetchTodos.pending, state => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchTodos.fulfilled, (state, action) => {
        state.loading = false;
        state.items = action.payload;
      })
      .addCase(fetchTodos.rejected, (state, action) => {
        state.loading = false;
        state.error = "L·ªói khi fetch d·ªØ li·ªáu!";
      });
  },
});

export const { addTodo, deleteTodo, editTodo } = todoSlice.actions;
export default todoSlice.reducer;

============================
‚öôÔ∏è Store ‚Äì store.js
============================
import { configureStore } from "@reduxjs/toolkit";
import todoReducer from "../features/todos/todoSlice";

export const store = configureStore({
  reducer: {
    todos: todoReducer,
  },
});

============================
üì¶ Component s·ª≠ d·ª•ng ‚Äì TodoList.jsx
============================
import React, { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import {
  fetchTodos,
  addTodo,
  deleteTodo,
  editTodo,
} from "./todoSlice";

export default function TodoList() {
  const [newTitle, setNewTitle] = useState("");
  const todos = useSelector(state => state.todos.items);
  const loading = useSelector(state => state.todos.loading);
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(fetchTodos());
  }, [dispatch]);

  const handleAdd = () => {
    const newTodo = {
      id: Date.now(),
      title: newTitle,
      completed: false,
    };
    dispatch(addTodo(newTodo));
    setNewTitle("");
  };

  const handleEdit = (id) => {
    const updatedTitle = prompt("Nh·∫≠p ti√™u ƒë·ªÅ m·ªõi:");
    if (updatedTitle) {
      dispatch(editTodo({ id, title: updatedTitle }));
    }
  };

  const handleDelete = (id) => {
    dispatch(deleteTodo(id));
  };

  return (
    <div>
      <h2>Todo List</h2>
      <input
        value={newTitle}
        onChange={(e) => setNewTitle(e.target.value)}
        placeholder="Nh·∫≠p vi·ªác c·∫ßn l√†m"
      />
      <button onClick={handleAdd}>Th√™m</button>
      {loading ? (
        <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
      ) : (
        <ul>
          {todos.map((todo) => (
            <li key={todo.id}>
              {todo.title}
              <button onClick={() => handleEdit(todo.id)}>S·ª≠a</button>
              <button onClick={() => handleDelete(todo.id)}>X√≥a</button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

============================
üîó App.jsx
============================
import React from "react";
import { Provider } from "react-redux";
import { store } from "./app/store";
import TodoList from "./features/todos/TodoList";

function App() {
  return (
    <Provider store={store}>
      <TodoList />
    </Provider>
  );
}

export default App;

============================
‚úÖ Ghi ch√∫ cu·ªëi c√πng
============================
- ƒê√¢y l√† m·ªôt v√≠ d·ª• ƒë·∫ßy ƒë·ªß ƒë·ªÉ b·∫°n CRUD danh s√°ch t·ª´ API ho·∫∑c local state.
- C√≥ th·ªÉ √°p d·ª•ng cho: todo, danh s√°ch b√†i vi·∫øt, danh s√°ch s·∫£n ph·∫©m...
- N·∫øu c·∫ßn pagination, filter, sort... b·∫°n ch·ªâ c·∫ßn m·ªü r·ªông th√™m reducer & UI.
