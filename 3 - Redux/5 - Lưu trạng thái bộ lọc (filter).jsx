// ============================
// üß© Ng·ªØ c·∫£nh #5: L∆∞u tr·∫°ng th√°i b·ªô l·ªçc (Filter)
// ============================

// üéØ M·ª•c ti√™u:
// L∆∞u tr·∫°ng th√°i b·ªô l·ªçc cho danh s√°ch nh∆∞:
// - T·ª´ kh√≥a t√¨m ki·∫øm
// - Lo·∫°i danh m·ª•c (category)
// - Tr·∫°ng th√°i hi·ªÉn th·ªã (hi·ªán t·∫•t c·∫£, ƒë√£ ho√†n th√†nh, ch∆∞a ho√†n th√†nh)
// - S·∫Øp x·∫øp theo (t√™n, th·ªùi gian, ƒë·ªô ∆∞u ti√™n...)

// ============================
// üìÅ C·∫•u tr√∫c th∆∞ m·ª•c
// ============================
// src/
// ‚îú‚îÄ‚îÄ app/
// ‚îÇ   ‚îî‚îÄ‚îÄ store.js
// ‚îú‚îÄ‚îÄ features/
// ‚îÇ   ‚îú‚îÄ‚îÄ filters/
// ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ filterSlice.js
// ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ FilterPanel.jsx
// ‚îÇ   ‚îî‚îÄ‚îÄ todos/
// ‚îÇ       ‚îî‚îÄ‚îÄ TodoList.jsx (gi·∫£ ƒë·ªãnh d√πng d·ªØ li·ªáu todo c√≥ √°p d·ª•ng filter)
// ‚îî‚îÄ‚îÄ App.jsx

// ============================
// üß† Redux Slice ‚Äì filterSlice.js
// ============================
import { createSlice } from "@reduxjs/toolkit";

const filterSlice = createSlice({
  name: "filters",
  initialState: {
    searchText: "",
    category: "all",
    status: "all", // all | completed | pending
    sortBy: "createdAt", // name | createdAt | priority
  },
  reducers: {
    setSearchText: (state, action) => {
      state.searchText = action.payload;
    },
    setCategory: (state, action) => {
      state.category = action.payload;
    },
    setStatus: (state, action) => {
      state.status = action.payload;
    },
    setSortBy: (state, action) => {
      state.sortBy = action.payload;
    },
  },
});

export const { setSearchText, setCategory, setStatus, setSortBy } =
  filterSlice.actions;

export default filterSlice.reducer;

// ============================
// ‚öôÔ∏è Store ‚Äì store.js
// ============================
import { configureStore } from "@reduxjs/toolkit";
import filterReducer from "../features/filters/filterSlice";

export const store = configureStore({
  reducer: {
    filters: filterReducer,
  },
});

// ============================
// üß© Component ‚Äì FilterPanel.jsx
// ============================
import React from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  setSearchText,
  setCategory,
  setStatus,
  setSortBy,
} from "./filterSlice";

export default function FilterPanel() {
  const dispatch = useDispatch();
  const filters = useSelector((state) => state.filters);

  return (
    <div>
      <h3>B·ªô l·ªçc</h3>

      <input
        type="text"
        placeholder="T√¨m ki·∫øm..."
        value={filters.searchText}
        onChange={(e) => dispatch(setSearchText(e.target.value))}
      />

      <select
        value={filters.category}
        onChange={(e) => dispatch(setCategory(e.target.value))}
      >
        <option value="all">T·∫•t c·∫£ danh m·ª•c</option>
        <option value="work">C√¥ng vi·ªác</option>
        <option value="personal">C√° nh√¢n</option>
      </select>

      <select
        value={filters.status}
        onChange={(e) => dispatch(setStatus(e.target.value))}
      >
        <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
        <option value="completed">ƒê√£ ho√†n th√†nh</option>
        <option value="pending">Ch∆∞a ho√†n th√†nh</option>
      </select>

      <select
        value={filters.sortBy}
        onChange={(e) => dispatch(setSortBy(e.target.value))}
      >
        <option value="createdAt">Th·ªùi gian t·∫°o</option>
        <option value="name">T√™n</option>
        <option value="priority">ƒê·ªô ∆∞u ti√™n</option>
      </select>
    </div>
  );
}

// ============================
// üîó App.jsx
// ============================
import React from "react";
import { Provider } from "react-redux";
import { store } from "./app/store";
import FilterPanel from "./features/filters/FilterPanel";

function App() {
  return (
    <Provider store={store}>
      <FilterPanel />
    </Provider>
  );
}

export default App;

// ============================
// ‚úÖ Ghi ch√∫ cu·ªëi c√πng
// ============================
// - B·ªô l·ªçc n√†y ch·ªâ l√† "b·ªô nh·ªõ" c·ªßa giao di·ªán, kh√¥ng ch·ª©a d·ªØ li·ªáu th·ª±c.
// - Component danh s√°ch (todo, user...) c·∫ßn l·∫•y gi√° tr·ªã filter t·ª´ state ƒë·ªÉ l·ªçc.
// - T√°ch filter slice ri√™ng gi√∫p d·ªÖ m·ªü r·ªông, t√°i s·ª≠ d·ª•ng ·ªü nhi·ªÅu n∆°i kh√°c nhau.
