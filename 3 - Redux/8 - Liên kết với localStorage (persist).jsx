==============================
Ng·ªØ c·∫£nh #8: Li√™n k·∫øt localStorage
==============================

üéØ M·ª•c ti√™u:
- L∆∞u d·ªØ li·ªáu Redux (nh∆∞ token, gi·ªè h√†ng) v√†o localStorage
- T·ª± ƒë·ªông kh√¥i ph·ª•c l·∫°i state khi reload trang
- ƒê·∫£m b·∫£o ƒë·ªìng b·ªô gi·ªØa Redux v√† localStorage

==============================
1. C·∫•u tr√∫c th∆∞ m·ª•c
==============================

src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îî‚îÄ‚îÄ store.js
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îî‚îÄ‚îÄ auth/
‚îÇ       ‚îú‚îÄ‚îÄ authSlice.js
‚îÇ       ‚îî‚îÄ‚îÄ LoginForm.jsx
‚îú‚îÄ‚îÄ App.jsx
‚îî‚îÄ‚îÄ main.jsx

==============================
2. T·∫°o slice c√≥ d√πng localStorage
==============================
// src/features/auth/authSlice.js
import { createSlice } from "@reduxjs/toolkit";

// üì¶ Load token t·ª´ localStorage n·∫øu c√≥
const savedToken = localStorage.getItem("token");

const authSlice = createSlice({
  name: "auth",
  initialState: {
    token: savedToken || null,
  },
  reducers: {
    login(state, action) {
      state.token = action.payload;
      localStorage.setItem("token", action.payload); // üìù Ghi v√†o localStorage
    },
    logout(state) {
      state.token = null;
      localStorage.removeItem("token"); // ‚ùå X√≥a kh·ªèi localStorage
    },
  },
});

export const { login, logout } = authSlice.actions;
export default authSlice.reducer;

==============================
3. C√†i ƒë·∫∑t store
==============================
// src/app/store.js
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "../features/auth/authSlice";

export const store = configureStore({
  reducer: {
    auth: authReducer,
  },
});

==============================
4. S·ª≠ d·ª•ng trong Component
==============================
// src/features/auth/LoginForm.jsx
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { login, logout } from "./authSlice";

export default function LoginForm() {
  const dispatch = useDispatch();
  const token = useSelector((state) => state.auth.token);
  const [input, setInput] = useState("");

  const handleLogin = () => {
    if (input.trim()) {
      dispatch(login(input));
    }
  };

  const handleLogout = () => {
    dispatch(logout());
  };

  return (
    <div>
      <h3>Login Form</h3>
      {token ? (
        <div>
          <p>ƒê√£ ƒëƒÉng nh·∫≠p v·ªõi token: <code>{token}</code></p>
          <button onClick={handleLogout}>ƒêƒÉng xu·∫•t</button>
        </div>
      ) : (
        <div>
          <input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Nh·∫≠p token..."
          />
          <button onClick={handleLogin}>ƒêƒÉng nh·∫≠p</button>
        </div>
      )}
    </div>
  );
}

==============================
5. K·∫øt n·ªëi v√†o App
==============================
// App.jsx
import LoginForm from "./features/auth/LoginForm";
export default function App() {
  return (
    <div>
      <h1>·ª®ng d·ª•ng Redux + localStorage</h1>
      <LoginForm />
    </div>
  );
}

// main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import { store } from "./app/store";
import { Provider } from "react-redux";

ReactDOM.createRoot(document.getElementById("root")).render(
  <Provider store={store}>
    <App />
  </Provider>
);

==============================
‚úÖ Ghi ch√∫:
==============================
- D·ªØ li·ªáu s·∫Ω **gi·ªØ nguy√™n** k·ªÉ c·∫£ khi F5 (reload)
- C√≥ th·ªÉ d√πng cho `token`, `cart`, `theme`, `language`...
- ƒê√¢y l√† c√°ch th·ªß c√¥ng (d·ªÖ hi·ªÉu, ki·ªÉm so√°t t·ªët)

üõ† Ngo√†i ra, c√≥ th·ªÉ d√πng th∆∞ vi·ªán nh∆∞:
- redux-persist: t·ª± ƒë·ªông h√≥a qu√° tr√¨nh l∆∞u/kh√¥i ph·ª•c
