// ==============================
// Ng·ªØ c·∫£nh #7: G·ªçi API b·∫•t ƒë·ªìng b·ªô
// ==============================

// üéØ M·ª•c ti√™u:
// - G·ªçi API l·∫•y danh s√°ch d·ªØ li·ªáu (VD: b√†i vi·∫øt, ng∆∞·ªùi d√πng...)
// - L∆∞u k·∫øt qu·∫£ v√†o Redux store
// - Hi·ªÉn th·ªã tr·∫°ng th√°i loading, error n·∫øu c√≥

// ==============================
// 1. C√†i ƒë·∫∑t ban ƒë·∫ßu
// ==============================

// npm install @reduxjs/toolkit react-redux axios

// ==============================
// 2. C·∫•u tr√∫c th∆∞ m·ª•c
// ==============================

// src/
// ‚îú‚îÄ‚îÄ app/
// ‚îÇ   ‚îî‚îÄ‚îÄ store.js
// ‚îú‚îÄ‚îÄ features/
// ‚îÇ   ‚îî‚îÄ‚îÄ posts/
// ‚îÇ       ‚îú‚îÄ‚îÄ postsSlice.js
// ‚îÇ       ‚îî‚îÄ‚îÄ PostsList.jsx
// ‚îú‚îÄ‚îÄ App.jsx
// ‚îî‚îÄ‚îÄ main.jsx

// ==============================
// 3. T·∫°o store
// ==============================
// src/app/store.js
import { configureStore } from "@reduxjs/toolkit";
import postsReducer from "../features/posts/postsSlice";

export const store = configureStore({
  reducer: {
    posts: postsReducer,
  },
});

// ==============================
// 4. G·ªçi API v·ªõi createAsyncThunk
// ==============================
// src/features/posts/postsSlice.js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

// üåÄ T·∫°o async thunk
export const fetchPosts = createAsyncThunk("posts/fetchPosts", async () => {
  const response = await axios.get("https://jsonplaceholder.typicode.com/posts");
  return response.data;
});

const postsSlice = createSlice({
  name: "posts",
  initialState: {
    items: [],
    status: "idle", // 'idle' | 'loading' | 'succeeded' | 'failed'
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchPosts.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchPosts.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.items = action.payload;
      })
      .addCase(fetchPosts.rejected, (state, action) => {
        state.status = "failed";
        state.error = action.error.message;
      });
  },
});

export default postsSlice.reducer;

// ==============================
// 5. S·ª≠ d·ª•ng trong Component
// ==============================
// src/features/posts/PostsList.jsx
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchPosts } from "./postsSlice";

export default function PostsList() {
  const dispatch = useDispatch();
  const { items, status, error } = useSelector((state) => state.posts);

  useEffect(() => {
    if (status === "idle") dispatch(fetchPosts());
  }, [status, dispatch]);

  if (status === "loading") return <p>ƒêang t·∫£i...</p>;
  if (status === "failed") return <p>L·ªói: {error}</p>;

  return (
    <ul>
      {items.map((post) => (
        <li key={post.id}>
          <b>{post.title}</b>
          <p>{post.body}</p>
        </li>
      ))}
    </ul>
  );
}

// ==============================
// 6. K·∫øt n·ªëi Redux v√†o React
// ==============================
// main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import { store } from "./app/store";
import { Provider } from "react-redux";

ReactDOM.createRoot(document.getElementById("root")).render(
  <Provider store={store}>
    <App />
  </Provider>
);

// App.jsx
import PostsList from "./features/posts/PostsList";
export default function App() {
  return (
    <div>
      <h1>Danh s√°ch b√†i vi·∫øt</h1>
      <PostsList />
    </div>
  );
}

// ==============================
// ‚úÖ K·∫øt qu·∫£:
// ==============================
// - Giao di·ªán t·ª± ƒë·ªông g·ªçi API khi load l·∫ßn ƒë·∫ßu
// - C√≥ x·ª≠ l√Ω loading v√† error
// - D·ªØ li·ªáu ƒë∆∞·ª£c qu·∫£n l√Ω trong Redux store
// - C√°ch n√†y gi√∫p b·∫°n:
//   - T√°ch bi·ªát logic g·ªçi API v√† UI
//   - D·ªÖ test / t√°i s·ª≠ d·ª•ng
