// ==========================
// üß† Model 3: TƒÉng an to√†n khi g·ªçi h√†m, truy·ªÅn d·ªØ li·ªáu
// M·ª•c ti√™u: Tr√°nh l·ªói runtime nh·ªù ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu khi truy·ªÅn bi·∫øn ho·∫∑c g·ªçi h√†m
// ==========================

// Ng·ªØ c·∫£nh: G·ª≠i d·ªØ li·ªáu ƒë∆°n h√†ng t·ª´ form nh·∫≠p li·ªáu

type Order = {
  productId: string;
  quantity: number;
};

// H√†m x·ª≠ l√Ω logic t·∫°o ƒë∆°n h√†ng
function createOrder(order: Order): void {
  console.log(`ƒê√£ t·∫°o ƒë∆°n h√†ng cho s·∫£n ph·∫©m ${order.productId}, s·ªë l∆∞·ª£ng ${order.quantity}`);
}

// ‚úÖ Truy·ªÅn ƒë√∫ng ki·ªÉu
const orderA: Order = {
  productId: 'sp-001',
  quantity: 3,
};

createOrder(orderA); // OK

// ‚ùå Truy·ªÅn sai ki·ªÉu ‚Äî s·∫Ω b·ªã TypeScript b·∫Øt l·ªói khi bi√™n d·ªãch
const orderB = {
  productId: 'sp-002',
  quantity: 'nhi·ªÅu', // ‚ùå l·ªói: 'nhi·ªÅu' kh√¥ng ph·∫£i l√† number
};

// createOrder(orderB); // ‚õî TypeScript b√°o l·ªói ngay t·ª´ IDE / compile-time

// ==========================
// L·ª£i √≠ch khi d√πng TypeScript:
// - IDE h·ªó tr·ª£ autocomplete (g·ª£i √Ω thu·ªôc t√≠nh, ki·ªÉu)
// - Kh√¥ng truy·ªÅn thi·∫øu ho·∫∑c sai t√™n thu·ªôc t√≠nh
// - Tr√°nh l·ªói kh√¥ng r√µ r√†ng khi ch·∫°y ch∆∞∆°ng tr√¨nh
// ==========================

// Ng·ªØ c·∫£nh b·ªï sung: H√†m nh·∫≠n callback c√≥ ki·ªÉu r√µ r√†ng

function processUser(callback: (name: string, age: number) => void) {
  callback('Bob', 28);
}

// ‚úÖ ƒê√∫ng ki·ªÉu
processUser((name, age) => {
  console.log(`${name} - ${age}`);
});

// ‚ùå Sai ki·ªÉu callback ‚Äî s·∫Ω b·ªã b√°o l·ªói
/*
processUser((name, active) => {
  // ‚õî l·ªói: 'active' ph·∫£i l√† number ch·ª© kh√¥ng ph·∫£i boolean
});
*/
