// ==========================
// üß† Model 8: X·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô c√≥ ki·ªÉm so√°t
// M·ª•c ti√™u: ƒê·∫£m b·∫£o c√°c thao t√°c b·∫•t ƒë·ªìng b·ªô (fetch, x·ª≠ l√Ω ch·∫≠m) c√≥ ki·ªÉu d·ªØ li·ªáu r√µ r√†ng
// ==========================

// Ng·ªØ c·∫£nh: G·ªçi API l·∫•y danh s√°ch s·∫£n ph·∫©m

type Product = {
  id: string;
  name: string;
  price: number;
};

// H√†m fetch tr·∫£ v·ªÅ Promise<Product[]>
async function fetchProducts(): Promise<Product[]> {
  const res = await fetch('https://api.example.com/products');
  const data = await res.json();
  return data;
}

// D√πng async/await v·ªõi ki·ªÉu r√µ r√†ng
async function showProducts() {
  const products = await fetchProducts(); // products: Product[]
  products.forEach((p) => {
    console.log(`${p.name} - ${p.price}ƒë`);
  });
}

// ==========================
// D√πng ReturnType ƒë·ªÉ t√°i s·ª≠ d·ª•ng ki·ªÉu tr·∫£ v·ªÅ t·ª´ m·ªôt h√†m

type FetchProductsReturn = ReturnType<typeof fetchProducts>; // Promise<Product[]>

// Ng·ªØ c·∫£nh: ƒê·ªãnh nghƒ©a ki·ªÉu cho dispatch trong Redux async thunk
// (gi·∫£ s·ª≠ fetchProducts l√† m·ªôt thunk)

type ThunkResult = Awaited<ReturnType<typeof fetchProducts>>; // Product[]

// ==========================
// Ng·ªØ c·∫£nh: H√†m x·ª≠ l√Ω d·ªØ li·ªáu ch·∫≠m (delay)

function delay(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function runWithDelay() {
  console.log('B·∫Øt ƒë·∫ßu');
  await delay(1000); // ƒë·ª£i 1 gi√¢y
  console.log('K·∫øt th√∫c sau 1s');
}

// ==========================
// Ng·ªØ c·∫£nh: H√†m callback tr·∫£ v·ªÅ Promise
// C√≥ th·ªÉ g√°n ki·ªÉu tr·∫£ v·ªÅ ƒë·ªÉ b·∫Øt l·ªói r√µ h∆°n

async function saveUser(user: { name: string }): Promise<boolean> {
  if (!user.name) return false;
  await delay(500);
  return true;
}
