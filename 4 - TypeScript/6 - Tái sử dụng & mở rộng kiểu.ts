// ==========================
// üß† Model 6: T√°i s·ª≠ d·ª•ng & m·ªü r·ªông ki·ªÉu
// M·ª•c ti√™u: Kh√¥ng l·∫∑p l·∫°i ƒë·ªãnh nghƒ©a ki·ªÉu, m·ªü r·ªông v√† t√πy bi·∫øn ki·ªÉu linh ho·∫°t
// ==========================

// Ng·ªØ c·∫£nh: H·ªá th·ªëng ng∆∞·ªùi d√πng c√≥ th·ªÉ l√† Admin ho·∫∑c Kh√°ch

// ƒê·ªãnh nghƒ©a ki·ªÉu g·ªëc
interface BaseUser {
  id: string;
  name: string;
  email: string;
}

// M·ªü r·ªông ki·ªÉu d√πng `extends`
interface AdminUser extends BaseUser {
  role: 'admin';
  permissions: string[];
}

interface GuestUser extends BaseUser {
  role: 'guest';
  accessToken: string;
}

// ==========================
// S·ª≠ d·ª•ng Partial<T> ƒë·ªÉ t·∫°o phi√™n b·∫£n c√≥ th·ªÉ thi·∫øu m·ªôt s·ªë tr∆∞·ªùng (th∆∞·ªùng d√πng trong form)

type UpdateUserInput = Partial<BaseUser>;

const updateUser: UpdateUserInput = {
  email: 'new@email.com', // c√≥ th·ªÉ ch·ªâ c·∫≠p nh·∫≠t 1 field
};

// ==========================
// S·ª≠ d·ª•ng Pick<T, K> ƒë·ªÉ ch·ªçn m·ªôt v√†i field t·ª´ ki·ªÉu g·ªëc

type UserPreview = Pick<BaseUser, 'id' | 'name'>;

const preview: UserPreview = {
  id: 'u01',
  name: 'Trung',
};

// ==========================
// S·ª≠ d·ª•ng Omit<T, K> ƒë·ªÉ lo·∫°i b·ªè m·ªôt v√†i field kh·ªèi ki·ªÉu g·ªëc

type UserWithoutEmail = Omit<BaseUser, 'email'>;

const userNoEmail: UserWithoutEmail = {
  id: 'u02',
  name: '·∫®n danh',
};

// ==========================
// D√πng generic <T> ƒë·ªÉ t·∫°o ki·ªÉu linh ho·∫°t

// Ng·ªØ c·∫£nh: Response tr·∫£ v·ªÅ t·ª´ API

type ApiResponse<T> = {
  success: boolean;
  data: T;
};

type Product = {
  id: string;
  name: string;
  price: number;
};

const productResponse: ApiResponse<Product> = {
  success: true,
  data: {
    id: 'p001',
    name: 'Chu·ªôt kh√¥ng d√¢y',
    price: 299,
  },
};

// ==========================
// D√πng generic function

function wrapInArray<T>(value: T): T[] {
  return [value];
}

const nums = wrapInArray<number>(5); // [5]
const names = wrapInArray<string>('Alice'); // ['Alice']
