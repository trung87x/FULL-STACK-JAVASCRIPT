// ==========================
// üß† Model 5: Ki·ªÉm so√°t c√°c tr·∫°ng th√°i c√≥ th·ªÉ x·∫£y ra
// M·ª•c ti√™u: H·∫°n ch·∫ø l·ªói logic b·∫±ng c√°ch x√°c ƒë·ªãnh r√µ c√°c tr·∫°ng th√°i h·ª£p l·ªá
// ==========================

// Ng·ªØ c·∫£nh: Theo d√µi tr·∫°ng th√°i c·ªßa m·ªôt ƒë∆°n h√†ng

// C√°ch 1: D√πng literal union type
type OrderStatus = 'pending' | 'shipped' | 'delivered' | 'cancelled';

function updateOrderStatus(status: OrderStatus) {
  console.log('Tr·∫°ng th√°i ƒë∆°n h√†ng:', status);
}

updateOrderStatus('pending'); // ‚úÖ
updateOrderStatus('cancelled'); // ‚úÖ
// updateOrderStatus('lost'); // ‚õî l·ªói: 'lost' kh√¥ng thu·ªôc OrderStatus

// ==========================
// C√°ch 2: D√πng enum n·∫øu c·∫ßn c·∫•u tr√∫c r√µ r√†ng h∆°n

enum PaymentStatus {
  Unpaid = 'unpaid',
  Paid = 'paid',
  Refunded = 'refunded',
}

function checkPayment(status: PaymentStatus) {
  if (status === PaymentStatus.Paid) {
    console.log('ƒê√£ thanh to√°n');
  }
}

// ==========================
// C√°ch 3: Discriminated Union + Type Guard
// Ng·ªØ c·∫£nh: X·ª≠ l√Ω th√¥ng b√°o (message) v·ªõi nhi·ªÅu lo·∫°i kh√°c nhau

type TextMessage = {
  type: 'text';
  content: string;
};

type ImageMessage = {
  type: 'image';
  url: string;
  width: number;
  height: number;
};

type VideoMessage = {
  type: 'video';
  url: string;
  duration: number;
};

type Message = TextMessage | ImageMessage | VideoMessage;

function handleMessage(msg: Message) {
  switch (msg.type) {
    case 'text':
      console.log('Text:', msg.content);
      break;
    case 'image':
      console.log(`Image: ${msg.url} - ${msg.width}x${msg.height}`);
      break;
    case 'video':
      console.log(`Video: ${msg.url} - ${msg.duration}s`);
      break;
    default:
      const _exhaustiveCheck: never = msg;
      return _exhaustiveCheck;
  }
}

// ‚úÖ TypeScript ƒë·∫£m b·∫£o b·∫°n ƒë√£ x·ª≠ l√Ω h·∫øt c√°c tr∆∞·ªùng h·ª£p
// N·∫øu qu√™n case 'video', compiler s·∫Ω b√°o l·ªói ·ªü bi·∫øn `_exhaustiveCheck`

// ==========================
// C√°ch 4: Type Guard t√πy ch·ªânh
// Ng·ªØ c·∫£nh: Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ c√≥ ph·∫£i d·∫°ng l·ªói

type ApiResponse = {
  success: boolean;
  data?: any;
  error?: string;
};

function isError(response: ApiResponse): response is { success: false; error: string } {
  return !response.success && typeof response.error === 'string';
}

const res: ApiResponse = { success: false, error: 'L·ªói 500' };

if (isError(res)) {
  console.log('L·ªói:', res.error); // ‚úÖ TypeScript bi·∫øt `res` c√≥ `error`
}
