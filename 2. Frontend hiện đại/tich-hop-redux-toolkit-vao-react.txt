📦 REDUX TOOLKIT TODO APP — TYPESCRIPT VERSION

=======================================
📁 CẤU TRÚC DỰ ÁN
=======================================
src/
├── app/store.ts             ⬅️ Khởi tạo Redux store
├── features/todo/todoSlice.ts ⬅️ Tạo slice quản lý todo
├── components/TodoItem.tsx  ⬅️ Component hiển thị 1 task
├── App.tsx                  ⬅️ Giao diện chính


=======================================
🔧 BƯỚC 1: TẠO DỰ ÁN REACT + TS
=======================================
npm create vite@latest my-redux-app -- --template react-ts
cd my-redux-app
npm install
npm install @reduxjs/toolkit react-redux


=======================================
🔧 BƯỚC 2: TẠO store.ts
=======================================
// src/app/store.ts

import { configureStore } from '@reduxjs/toolkit'
import todoReducer from '../features/todo/todoSlice'

export const store = configureStore({
  reducer: {
    todo: todoReducer
  }
})

// Type cho useSelector, useDispatch
export type RootState = ReturnType<typeof store.getState>
export type AppDispatch = typeof store.dispatch


=======================================
🔧 BƯỚC 3: TẠO todoSlice.ts
=======================================
// src/features/todo/todoSlice.ts

import { createSlice, PayloadAction } from '@reduxjs/toolkit'

interface Todo {
  id: number
  text: string
  done: boolean
}

interface TodoState {
  todos: Todo[]
}

const initialState: TodoState = {
  todos: []
}

const todoSlice = createSlice({
  name: 'todo',
  initialState,
  reducers: {
    addTodo: (state, action: PayloadAction<string>) => {
      state.todos.push({
        id: Date.now(),
        text: action.payload,
        done: false
      })
    },
    toggleTodo: (state, action: PayloadAction<number>) => {
      const todo = state.todos.find(t => t.id === action.payload)
      if (todo) todo.done = !todo.done
    },
    deleteTodo: (state, action: PayloadAction<number>) => {
      state.todos = state.todos.filter(t => t.id !== action.payload)
    }
  }
})

export const { addTodo, toggleTodo, deleteTodo } = todoSlice.actions
export default todoSlice.reducer


=======================================
🔧 BƯỚC 4: BỌC <App /> BẰNG <Provider>
=======================================
// src/main.tsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import { Provider } from 'react-redux'
import { store } from './app/store.ts'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>,
)


=======================================
🔧 BƯỚC 5: COMPONENT TodoItem.tsx
=======================================
// src/components/TodoItem.tsx

import { useDispatch } from 'react-redux'
import { toggleTodo, deleteTodo } from '../features/todo/todoSlice'
import type { AppDispatch } from '../app/store'

interface Props {
  id: number
  text: string
  done: boolean
}

export default function TodoItem({ id, text, done }: Props) {
  const dispatch = useDispatch<AppDispatch>()

  return (
    <li className="flex justify-between items-center bg-white p-3 rounded shadow mb-2">
      <span
        className={done ? "line-through text-gray-500 cursor-pointer" : "cursor-pointer"}
        onClick={() => dispatch(toggleTodo(id))}
      >
        {text}
      </span>
      <button
        onClick={() => dispatch(deleteTodo(id))}
        className="text-red-600 hover:underline"
      >
        Xoá
      </button>
    </li>
  )
}


=======================================
🔧 BƯỚC 6: App.tsx
=======================================
// src/App.tsx

import { useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { addTodo } from './features/todo/todoSlice'
import { RootState, AppDispatch } from './app/store'
import TodoItem from './components/TodoItem'

export default function App() {
  const [text, setText] = useState('')
  const todos = useSelector((state: RootState) => state.todo.todos)
  const dispatch = useDispatch<AppDispatch>()

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (text.trim()) {
      dispatch(addTodo(text))
      setText('')
    }
  }

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <h1 className="text-3xl font-bold mb-4 text-center">📋 Redux Todo App</h1>

      <form onSubmit={handleSubmit} className="flex gap-2 mb-6 max-w-xl mx-auto">
        <input
          type="text"
          value={text}
          onChange={e => setText(e.target.value)}
          placeholder="Nhập công việc..."
          className="flex-1 p-2 border rounded"
        />
        <button className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
          Thêm
        </button>
      </form>

      <ul className="max-w-xl mx-auto">
        {todos.map(todo => (
          <TodoItem key={todo.id} {...todo} />
        ))}
      </ul>
    </div>
  )
}


=======================================
📚 TỔNG KẾT KIẾN THỨC
=======================================
✔ Cài và cấu hình Redux Toolkit
✔ Tạo slice (todoSlice): state, action
✔ Khởi tạo store với configureStore
✔ Dùng <Provider> để kết nối store vào toàn bộ app
✔ useSelector: đọc dữ liệu
✔ useDispatch: gửi action
✔ TypeScript: rõ ràng & an toàn hơn

📦 Ứng dụng hoàn chỉnh: Todo với thêm / xoá / đánh dấu hoàn thành
