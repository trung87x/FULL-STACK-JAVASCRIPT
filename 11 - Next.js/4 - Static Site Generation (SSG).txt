🧠 Model 4: Static Site Generation (SSG) trong Next.js
-------------------------------------------------------
• Vai trò: Dựng sẵn HTML ngay tại thời điểm build, giúp tải siêu nhanh và tiết kiệm tài nguyên server.
• Controller:
  - App Router: dùng `generateStaticParams()` để tạo các trang động tĩnh.
  - Pages Router: dùng `getStaticProps()` (không dùng trong app/).
  - Dùng thêm `revalidate` để hỗ trợ ISR (Incremental Static Regeneration).

🌐 Ngữ cảnh #4: Trang blog tĩnh – hiển thị chi tiết bài viết từ danh sách slug
------------------------------------------------------------------------------
• Mục tiêu: Render từng bài blog dựa trên `slug`, dữ liệu được dựng sẵn khi build.
• Giả định API: `https://jsonplaceholder.typicode.com/posts`

📁 Cấu trúc thư mục:

app/
└── blog/
    ├── [slug]/
    │   └── page.tsx
    └── page.tsx

✏️ Mã nguồn:

// app/blog/page.tsx – danh sách bài viết
async function getPosts() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts')
  return res.json()
}

export default async function BlogListPage() {
  const posts = await getPosts()
  return (
    <main className="p-6">
      <h1 className="text-2xl font-bold">📚 Blog</h1>
      <ul className="list-disc pl-6 mt-4">
        {posts.slice(0, 5).map((post: any) => (
          <li key={post.id}>
            <a href={`/blog/${post.id}`} className="text-blue-600 hover:underline">
              {post.title}
            </a>
          </li>
        ))}
      </ul>
    </main>
  )
}

// app/blog/[slug]/page.tsx – chi tiết bài viết
export async function generateStaticParams() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts')
  const posts = await res.json()
  return posts.slice(0, 5).map((post: any) => ({ slug: post.id.toString() }))
}

async function getPost(slug: string) {
  const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${slug}`)
  return res.json()
}

export default async function BlogPostPage({ params }: { params: { slug: string } }) {
  const post = await getPost(params.slug)

  return (
    <main className="p-6">
      <h1 className="text-2xl font-bold">{post.title}</h1>
      <p className="mt-4 text-gray-700">{post.body}</p>
    </main>
  )
}

✅ Kết quả:
- Khi chạy `next build`, Next.js sẽ dựng sẵn HTML cho mỗi `/blog/[slug]`.
- Không cần fetch lại mỗi lần người dùng truy cập.
- Phù hợp với blog, landing page, tài liệu – nơi nội dung ít thay đổi thường xuyên.

🎯 Ghi nhớ:
- `generateStaticParams()` dùng để tạo route động tĩnh trong App Router.
- Có thể thêm `export const revalidate = 60` để hỗ trợ ISR nếu muốn cập nhật tự động sau mỗi 60s.
