üß† Ng·ªØ c·∫£nh #7: Ph√¢n quy·ªÅn (Role-based Access Control ‚Äì RBAC)
‚Üí Ch·ªâ cho ph√©p nh·ªØng ng∆∞·ªùi d√πng c√≥ quy·ªÅn ph√π h·ª£p (VD: "admin") m·ªõi truy c·∫≠p ƒë∆∞·ª£c c√°c route nh·∫°y c·∫£m.

üìÅ G·ª£i √Ω v·ªã tr√≠ file:
- File: middlewares/authorizeRole.js

// middlewares/authorizeRole.js
function authorizeRole(...allowedRoles) {
  return (req, res, next) => {
    const user = req.user;

    if (!user || !allowedRoles.includes(user.role)) {
      return res.status(403).json({ message: 'Access denied: insufficient permissions' });
    }

    next();
  };
}

module.exports = authorizeRole;

// ===============================
// S·ª≠ d·ª•ng middleware ph√¢n quy·ªÅn
// ===============================

// routes/adminRoutes.js
const express = require('express');
const router = express.Router();
const verifyToken = require('../middlewares/verifyToken');
const authorizeRole = require('../middlewares/authorizeRole');

router.get('/dashboard', verifyToken, authorizeRole('admin'), (req, res) => {
  res.json({ message: 'Welcome to admin dashboard', user: req.user });
});

module.exports = router;

// ===============================
// üìå Ghi ch√∫ quan tr·ªçng:
// ===============================
// - Middleware verifyToken ph·∫£i ch·∫°y TR∆Ø·ªöC authorizeRole (v√¨ req.user c·∫ßn c√≥)
// - Trong JWT payload (khi ƒëƒÉng nh·∫≠p) ph·∫£i c√≥ th√¥ng tin `role`, v√≠ d·ª•:
//     {
//       id: '123',
//       email: 'user@example.com',
//       role: 'admin'
//     }
//
// - C√≥ th·ªÉ d√πng authorizeRole cho nhi·ªÅu quy·ªÅn:
//     authorizeRole('admin', 'moderator')
// - N·∫øu user kh√¥ng c√≥ quy·ªÅn ph√π h·ª£p ‚Üí tr·∫£ v·ªÅ l·ªói 403
