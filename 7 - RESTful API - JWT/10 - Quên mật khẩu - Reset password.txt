🧠 Ngữ cảnh #10: Quên mật khẩu / Reset password
→ Cho phép người dùng reset mật khẩu qua email, thông qua token xác thực có thời hạn.

📁 Gợi ý các file:
- controllers/authController.js → Xử lý logic gửi mail và reset
- routes/auth.js → Tạo 2 endpoint:
    POST /forgot-password
    POST /reset-password/:token
- models/User.js → Lưu token reset và thời hạn vào DB

===============================
📄 Mô hình đơn giản hoá:
===============================

// 1. Gửi email chứa link reset password
// controllers/authController.js
const crypto = require('crypto');
const User = require('../models/User');
const sendEmail = require('../utils/sendEmail');

exports.forgotPassword = async (req, res) => {
  const { email } = req.body;
  const user = await User.findOne({ email });

  if (!user) return res.status(404).json({ message: 'Email không tồn tại' });

  const resetToken = crypto.randomBytes(32).toString('hex');
  const hashedToken = crypto.createHash('sha256').update(resetToken).digest('hex');

  user.resetPasswordToken = hashedToken;
  user.resetPasswordExpire = Date.now() + 15 * 60 * 1000; // 15 phút
  await user.save();

  const resetUrl = `http://localhost:3000/reset-password/${resetToken}`;
  await sendEmail(user.email, 'Reset Password', `Click vào link sau để reset: ${resetUrl}`);

  res.json({ message: 'Đã gửi email reset password' });
};

// 2. Reset mật khẩu
exports.resetPassword = async (req, res) => {
  const hashedToken = crypto.createHash('sha256').update(req.params.token).digest('hex');
  const user = await User.findOne({
    resetPasswordToken: hashedToken,
    resetPasswordExpire: { $gt: Date.now() }
  });

  if (!user) return res.status(400).json({ message: 'Token không hợp lệ hoặc đã hết hạn' });

  user.password = req.body.password;
  user.resetPasswordToken = undefined;
  user.resetPasswordExpire = undefined;
  await user.save();

  res.json({ message: 'Reset mật khẩu thành công' });
};

===============================
📄 Model user cần thêm:
===============================
// models/User.js
resetPasswordToken: String,
resetPasswordExpire: Date

===============================
📄 Route sử dụng:
===============================
router.post('/forgot-password', forgotPassword);
router.post('/reset-password/:token', resetPassword);

===============================
📌 Ghi chú quan trọng:
===============================
✅ Token reset phải được mã hoá và có thời hạn
✅ Gửi mail nên có domain thật trong sản phẩm (sử dụng dịch vụ như Mailtrap, SendGrid, Resend...)
✅ Khi reset xong, xoá token và thời hạn khỏi DB
✅ Nếu muốn bảo mật cao, nên tạo resetToken phức tạp, ngắn hạn và giới hạn số lần dùng
