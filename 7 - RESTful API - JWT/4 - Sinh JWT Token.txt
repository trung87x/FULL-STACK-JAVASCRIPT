===========================================
🧩 Ngữ cảnh #4: Sinh JWT Token & xác thực
===========================================

🧠 Mô hình (Model) – Ý nghĩa:
Sau khi người dùng đăng nhập thành công, backend sẽ tạo một JWT token đại diện cho user đó.

Token này sẽ được client lưu lại (localStorage hoặc cookie)  
→ và gửi kèm theo mỗi request sau này để xác thực.

---

🔐 JWT (JSON Web Token) là gì?
Là một chuỗi gồm 3 phần: HEADER.PAYLOAD.SIGNATURE

Ví dụ:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJ1c2VySWQiOiIxMjM0NTYifQ.
sD3vU3sAFkuXEi2h2skRRJSTyy_H7S8YGCr9Q1qef9g

---

🛠️ Các bước xử lý:
1. Đăng nhập thành công → tạo token bằng `jwt.sign()`
2. Token chứa thông tin user: `_id`, email...
3. Gửi token về client → client lưu
4. Client gửi token kèm mỗi lần gọi API
5. Backend dùng middleware `jwt.verify()` để xác thực

---

📦 Cài đặt thư viện:
npm install jsonwebtoken

---

📄 Tạo token ở bước đăng nhập:
-----------------------------------
const jwt = require('jsonwebtoken');

const token = jwt.sign(
  { userId: user._id, email: user.email },
  process.env.JWT_SECRET || 'SECRET_KEY',
  { expiresIn: '1h' }
);

res.json({
  message: 'Đăng nhập thành công',
  token
});

---

📄 File middleware/verifyToken.js
-----------------------------------
const jwt = require('jsonwebtoken');

function verifyToken(req, res, next) {
  const authHeader = req.headers.authorization;

  // Không có header
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: 'Không có token, từ chối truy cập' });
  }

  const token = authHeader.split(' ')[1];

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'SECRET_KEY');
    req.user = decoded;
    next();
  } catch (err) {
    return res.status(403).json({ message: 'Token không hợp lệ hoặc đã hết hạn' });
  }
}

module.exports = verifyToken;

---

📄 Gắn middleware vào route cần xác thực:
-----------------------------------
const verifyToken = require('../middleware/verifyToken');

router.get('/profile', verifyToken, async (req, res) => {
  res.json({
    message: 'Đã xác thực thành công',
    user: req.user
  });
});

---

📌 GHI CHÚ QUAN TRỌNG:

✅ Client gửi token trong header như sau:
Authorization: Bearer <token>

✅ Nên có hạn cho token (expiresIn: '1h', '7d'...)

✅ Không lưu JWT vào database (trừ khi dùng refresh token)

✅ Đừng decode token thủ công bằng `atob()`  
→ Luôn dùng `jwt.verify()` để đảm bảo chữ ký hợp lệ

✅ SECRET_KEY nên được cấu hình trong file .env:
JWT_SECRET=your-super-secret-key