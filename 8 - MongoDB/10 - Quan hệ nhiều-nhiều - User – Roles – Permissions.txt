üì¶ Ng·ªØ c·∫£nh #10: Quan h·ªá nhi·ªÅu-nhi·ªÅu ‚Äì User ‚Äì Roles ‚Äì Permissions (MongoDB + Mongoose)

üß† Model (√ù nghƒ©a)
- M·ªôt ng∆∞·ªùi d√πng c√≥ nhi·ªÅu vai tr√≤ (roles)
- M·ªôt vai tr√≤ c√≥ nhi·ªÅu quy·ªÅn (permissions)
- M√¥ h√¨nh ph√¢n quy·ªÅn linh ho·∫°t ‚Üí User ‚Üî Role ‚Üî Permission

üõ†Ô∏è Controller (C√¥ng c·ª• / C√¢u l·ªánh)
- D√πng `ref` ƒë·ªÉ li√™n k·∫øt gi·ªØa c√°c b·∫£ng
- D√πng `.populate()` ƒë·ªÉ truy v·∫•n s√¢u nhi·ªÅu c·∫•p

üß™ Example Schema: models/Permission.js
const mongoose = require('mongoose');
const permissionSchema = new mongoose.Schema({
  name: { type: String, required: true },
});
module.exports = mongoose.model('Permission', permissionSchema);

üß™ Example Schema: models/Role.js
const mongoose = require('mongoose');
const roleSchema = new mongoose.Schema({
  name: { type: String, required: true },
  permissions: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Permission' }]
});
module.exports = mongoose.model('Role', roleSchema);

üß™ Example Schema: models/User.js
const mongoose = require('mongoose');
const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  roles: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Role' }]
});
module.exports = mongoose.model('User', userSchema);

üß™ Example: L·∫•y User k√®m Roles + Permissions
const User = require('../models/User');

const getUsersWithRolesAndPermissions = async (req, res) => {
  try {
    const users = await User.find()
      .populate({
        path: 'roles',
        populate: { path: 'permissions' } // populate l·ªìng nhau
      });

    res.json(users);
  } catch (err) {
    res.status(500).json({ error: 'L·ªói truy v·∫•n ng∆∞·ªùi d√πng' });
  }
};

üìù Ghi ch√∫:
- C·∫ßn t·∫°o s·∫µn d·ªØ li·ªáu cho c√°c b·∫£ng: `Permission`, `Role`, `User`
- ƒê√¢y l√† quan h·ªá nhi·ªÅu-nhi·ªÅu theo ki·ªÉu "gi√°n ti·∫øp"
- C√≥ th·ªÉ m·ªü r·ªông th√™m tr∆∞·ªùng m√¥ t·∫£ quy·ªÅn, ng√†y c·∫•p quy·ªÅn...
