📦 Ngữ cảnh #7: Hash password trước khi lưu (MongoDB + Mongoose + bcrypt)

🧠 Model (Ý nghĩa)
- Để bảo mật, mật khẩu không được lưu dưới dạng văn bản thuần (plain text).
- Trước khi lưu vào database, ta phải "mã hoá một chiều" (hash).
- Việc này thường xử lý ở tầng Model (trong `schema.pre('save')`)

🛠️ Controller (Công cụ / Câu lệnh)
- `bcrypt.hash(plainPassword, saltRounds)`
- Dùng `schema.pre('save', async function(next) {...})` để xử lý trước khi lưu
- `this.isModified('password')` giúp tránh hash lại khi không thay đổi

🧪 Example (models/User.js)
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  createdAt: { type: Date, default: Date.now },
});

// Middleware: Hash password trước khi lưu
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next(); // bỏ qua nếu không sửa password

  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (err) {
    next(err);
  }
});

const User = mongoose.model('User', userSchema);
module.exports = User;

📝 Ghi chú:
- `bcrypt.genSalt(10)`: tạo salt với độ mạnh 10 vòng lặp
- Không nên hash lại nếu password không thay đổi (giúp update user không bị lỗi)
- Dữ liệu khi lưu vào DB sẽ là chuỗi hash không thể đảo ngược
