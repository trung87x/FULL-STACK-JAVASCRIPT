üì¶ Ng·ªØ c·∫£nh #5: C·∫≠p nh·∫≠t th√¥ng tin user / b·∫£n ghi (MongoDB + Mongoose)

üß† Model (√ù nghƒ©a)
- Cho ph√©p ng∆∞·ªùi d√πng ch·ªânh s·ª≠a th√¥ng tin nh∆∞: t√™n, m·∫≠t kh·∫©u, ·∫£nh ƒë·∫°i di·ªán...
- Admin c√≥ th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i, vai tr√≤ (role), ho·∫∑c c·∫≠p nh·∫≠t d·ªØ li·ªáu b·∫•t k·ª≥.
- ƒê√¢y l√† h√†nh vi "Update" trong CRUD (PUT/PATCH request).

üõ†Ô∏è Controller (C√¥ng c·ª• / C√¢u l·ªánh)
- `Model.findByIdAndUpdate(id, updateObj, options)`
- `Model.updateOne({ _id }, updateObj)`
- `Model.updateMany({ ƒëi·ªÅu ki·ªán }, updateObj)`
- Options th∆∞·ªùng d√πng: `{ new: true, runValidators: true }`

üß™ Example (routes/userRoute.js)
const express = require('express');
const User = require('../models/User');
const router = express.Router();

// PUT /users/:id - C·∫≠p nh·∫≠t t√™n v√† tr·∫°ng th√°i active
router.put('/users/:id', async (req, res) => {
  try {
    const updates = {
      name: req.body.name,
      isActive: req.body.isActive,
    };

    const user = await User.findByIdAndUpdate(
      req.params.id,
      updates,
      { new: true, runValidators: true }
    ).select('-password');

    if (!user) return res.status(404).json({ error: 'User not found' });

    res.json({ message: 'User updated', user });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

module.exports = router;

üìù Ghi ch√∫:
- `new: true` ‚Üí tr·∫£ v·ªÅ d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
- `runValidators: true` ‚Üí ki·ªÉm tra r√†ng bu·ªôc schema khi c·∫≠p nh·∫≠t
- Kh√¥ng n√™n c·∫≠p nh·∫≠t password b·∫±ng c√°ch n√†y (x·ª≠ l√Ω ri√™ng v·ªõi `bcrypt` v√† `.pre('save')`)
- C√≥ th·ªÉ d√πng `PATCH` thay v√¨ `PUT` n·∫øu ch·ªâ s·ª≠a 1 ph·∫ßn d·ªØ li·ªáu
