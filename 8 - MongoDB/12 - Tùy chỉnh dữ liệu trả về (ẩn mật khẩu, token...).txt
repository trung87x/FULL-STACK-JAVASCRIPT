üì¶ Ng·ªØ c·∫£nh #12: T√πy ch·ªânh d·ªØ li·ªáu tr·∫£ v·ªÅ (·∫©n m·∫≠t kh·∫©u, token...) (MongoDB + Mongoose)

üß† Model (√ù nghƒ©a)
- Khi tr·∫£ d·ªØ li·ªáu t·ª´ DB v·ªÅ client, c·∫ßn **·∫©n c√°c tr∆∞·ªùng nh·∫°y c·∫£m** nh∆∞:
  - `password`, `accessToken`, `refreshToken`, v.v.
- Gi√∫p tƒÉng b·∫£o m·∫≠t & tr√°nh l·ªô th√¥ng tin nh·∫°y c·∫£m

üõ†Ô∏è Controller (C√¥ng c·ª• / C√¢u l·ªánh)
- D√πng `select: false` trong schema ƒë·ªÉ m·∫∑c ƒë·ªãnh kh√¥ng tr·∫£ v·ªÅ
- D√πng `.toJSON()` ho·∫∑c `.toObject()` v√† x√≥a th·ªß c√¥ng
- D√πng middleware `schema.methods.toJSON = function () { ... }` ƒë·ªÉ x·ª≠ l√Ω t·ª± ƒë·ªông

üß™ Example: models/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: {
    type: String,
    required: true,
    unique: true
  },
  password: {
    type: String,
    required: true,
    select: false // Kh√¥ng tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh
  },
  accessToken: {
    type: String,
    select: false
  }
});

// T√πy ch·ªânh d·ªØ li·ªáu tr·∫£ v·ªÅ (·∫©n password, token)
userSchema.methods.toJSON = function () {
  const obj = this.toObject();
  delete obj.password;
  delete obj.accessToken;
  return obj;
};

module.exports = mongoose.model('User', userSchema);

üìù Ghi ch√∫:
- `select: false` kh√¥ng lo·∫°i b·ªè ho√†n to√†n ‚Äî c·∫ßn `.select('+password')` n·∫øu mu·ªën l·∫•y l·∫°i khi c·∫ßn x√°c th·ª±c
- C√≥ th·ªÉ k·∫øt h·ª£p `.lean()` v√† x·ª≠ l√Ω x√≥a th·ªß c√¥ng:  
  `const user = await User.findById(id).lean(); delete user.password;`
- Ch·ªâ n√™n tr·∫£ v·ªÅ d·ªØ li·ªáu **t·ªëi thi·ªÉu c·∫ßn thi·∫øt** cho frontend
