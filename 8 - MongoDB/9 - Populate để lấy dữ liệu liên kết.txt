üì¶ Ng·ªØ c·∫£nh #9: Populate ƒë·ªÉ l·∫•y d·ªØ li·ªáu li√™n k·∫øt (MongoDB + Mongoose)

üß† Model (√ù nghƒ©a)
- M·ªôt b·∫£n ghi li√™n k·∫øt t·ªõi b·∫£n ghi kh√°c (1-n, n-1, n-n)
- V√≠ d·ª•: B√†i vi·∫øt (`Post`) li√™n k·∫øt t·ªõi ng∆∞·ªùi t·∫°o (`User`)
- Khi truy v·∫•n b√†i vi·∫øt, c·∫ßn l·∫•y th√¥ng tin ng∆∞·ªùi t·∫°o (populate)

üõ†Ô∏è Controller (C√¥ng c·ª• / C√¢u l·ªánh)
- D√πng `ref` trong schema ƒë·ªÉ li√™n k·∫øt
- D√πng `.populate('t√™nTr∆∞·ªùng')` ƒë·ªÉ l·∫•y th√¥ng tin li√™n quan

üß™ Example (models/Post.js)
const mongoose = require('mongoose');

const postSchema = new mongoose.Schema({
  title: String,
  content: String,
  author: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User' // Li√™n k·∫øt t·ªõi User model
  }
});

module.exports = mongoose.model('Post', postSchema);

üß™ Example (routes/postRoute.js)
const express = require('express');
const Post = require('../models/Post');
const router = express.Router();

// GET /posts - L·∫•y t·∫•t c·∫£ b√†i vi·∫øt + th√¥ng tin ng∆∞·ªùi t·∫°o
router.get('/posts', async (req, res) => {
  try {
    const posts = await Post.find().populate('author', 'name email -_id'); 
    res.json(posts);
  } catch (err) {
    res.status(500).json({ error: 'L·ªói khi l·∫•y b√†i vi·∫øt' });
  }
});

module.exports = router;

üìù Ghi ch√∫:
- `.populate('author')` s·∫Ω thay ObjectId b·∫±ng object `User`
- C√≥ th·ªÉ ch·ªçn tr∆∞·ªùng c·ª• th·ªÉ: `populate('author', 'name email')`
- C√≥ th·ªÉ populate l·ªìng nhau (multi-level)
- ƒê·∫£m b·∫£o User model ƒë√£ `export` ƒë√∫ng v√† c√≥ d·ªØ li·ªáu ph√π h·ª£p
