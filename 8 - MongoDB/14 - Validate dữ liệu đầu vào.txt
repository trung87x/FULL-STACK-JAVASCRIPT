==============================
#14. Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
==============================

üìò Model (√ù nghƒ©a):
- ƒê·∫£m b·∫£o d·ªØ li·ªáu nh·∫≠p v√†o h·ª£p l·ªá tr∆∞·ªõc khi l∆∞u v√†o database
- NgƒÉn ng∆∞·ªùi d√πng g·ª≠i d·ªØ li·ªáu sai ƒë·ªãnh d·∫°ng, thi·∫øu th√¥ng tin...

üõ†Ô∏è Controller (C√¥ng c·ª• / C√¢u l·ªánh):

// File: models/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'T√™n l√† b·∫Øt bu·ªôc'],
    minlength: [3, 'T√™n qu√° ng·∫Øn (t·ªëi thi·ªÉu 3 k√Ω t·ª±)']
  },
  email: {
    type: String,
    required: [true, 'Email l√† b·∫Øt bu·ªôc'],
    match: [/.+@.+\..+/, 'Email kh√¥ng h·ª£p l·ªá'],
    unique: true
  },
  password: {
    type: String,
    required: [true, 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc'],
    minlength: [6, 'M·∫≠t kh·∫©u qu√° ng·∫Øn (t·ªëi thi·ªÉu 6 k√Ω t·ª±)']
  }
});

module.exports = mongoose.model('User', userSchema);

// Khi g·ªçi create:
try {
  const newUser = await User.create(req.body);
} catch (err) {
  console.log(err.errors); // Chi ti·∫øt l·ªói validate
  res.status(400).json({ error: err.message });
}
