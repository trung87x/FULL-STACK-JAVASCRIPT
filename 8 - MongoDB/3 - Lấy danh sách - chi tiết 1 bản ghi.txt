üì¶ Ng·ªØ c·∫£nh #3: L·∫•y danh s√°ch / Chi ti·∫øt 1 b·∫£n ghi (MongoDB + Mongoose)

üß† Model (√ù nghƒ©a)
- Truy xu·∫•t d·ªØ li·ªáu l√† thao t√°c ph·ªï bi·∫øn nh·∫•t sau khi ƒë√£ l∆∞u th√†nh c√¥ng.
- C√≥ th·ªÉ l·∫•y to√†n b·ªô danh s√°ch (GET all) ho·∫∑c chi ti·∫øt theo `id` (GET by ID).
- Ph√π h·ª£p cho API nh∆∞: xem t·∫•t c·∫£ user, 1 b√†i vi·∫øt c·ª• th·ªÉ, s·∫£n ph·∫©m chi ti·∫øt...

üõ†Ô∏è Controller (C√¥ng c·ª• / C√¢u l·ªánh)
- `Model.find()` ‚Üí l·∫•y to√†n b·ªô
- `Model.findById(id)` ‚Üí l·∫•y theo `_id` (ho·∫∑c `Model.findOne({ _id })`)
- C√≥ th·ªÉ k·∫øt h·ª£p `.select()` ƒë·ªÉ ·∫©n/hi·ªán tr∆∞·ªùng
- `.lean()` n·∫øu ch·ªâ c·∫ßn object ƒë∆°n gi·∫£n, kh√¥ng c·∫ßn instance mongoose

üß™ Example (routes/userRoute.js)
const express = require('express');
const User = require('../models/User');
const router = express.Router();

// GET /users - L·∫•y danh s√°ch t·∫•t c·∫£ user
router.get('/users', async (req, res) => {
  try {
    const users = await User.find().select('-password'); // ·∫©n tr∆∞·ªùng password
    res.json(users);
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});

// GET /users/:id - L·∫•y chi ti·∫øt 1 user theo ID
router.get('/users/:id', async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select('-password');
    if (!user) return res.status(404).json({ error: 'User not found' });
    res.json(user);
  } catch (err) {
    res.status(400).json({ error: 'Invalid ID' });
  }
});

module.exports = router;

üìù Ghi ch√∫:
- `.select('-password')`: lo·∫°i b·ªè field kh√¥ng c·∫ßn tr·∫£ v·ªÅ
- `.lean()` gi√∫p hi·ªáu nƒÉng cao h∆°n n·∫øu kh√¥ng c·∫ßn c√°c method mongoose
- N·∫øu ID kh√¥ng h·ª£p l·ªá ‚Üí s·∫Ω n√©m l·ªói (n√™n d√πng try/catch ho·∫∑c validate ID tr∆∞·ªõc)
